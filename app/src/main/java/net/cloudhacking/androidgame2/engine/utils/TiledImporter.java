package net.cloudhacking.androidgame2.engine.utils;

import android.util.Log;

import net.cloudhacking.androidgame2.engine.element.TileMap;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;

/**
 * Created by Andrew on 1/26/2015.
 */
public class TiledImporter extends Loggable {

    /**
     * This is an importer for json maps generated by Tiled:
     *      http://www.mapeditor.org/
     */

    public static class TiledObject {

        private ArrayList<Map> mLayers;
        private Map mCollision;

        public TiledObject(ArrayList<Map> layers, Map collision) {
            mLayers = layers;
            mCollision = collision;
        }

        public ArrayList<Map> getLayers() {
            return mLayers;
        }

        public Map getCollisionMap() {
            return mCollision;
        }
    }

    public static class Map implements TileMap.Map {

        private int[] mData;
        private int mWidth;
        private int mHeight;

        public Map(int[] data, int w, int h) {
            mData = data;
            mWidth = w;
            mHeight = h;
        }

        @Override
        public int getTile(int index) {
            return mData[index];
        }

        @Override
        public int getTile(int ix, int iy) {
            return mData[ ix + iy * mWidth ];
        }

        @Override
        public int getWidth() {
            return mWidth;
        }

        @Override
        public int getHeight() {
            return mHeight;
        }

    }


    public static TiledObject loadMaps(Resource jsonFile) {
        String jsonString = ResourceUtils.readTextFileFromRawResource(jsonFile.getId());
        ArrayList<Map> maps = new ArrayList<Map>();
        int[] collision = null;

        try {
            JSONObject obj = new JSONObject(jsonString);

            int width = obj.getInt("width");
            int height = obj.getInt("height");
            JSONArray layers = obj.getJSONArray("layers");
            Log.d("TiledImporter", "loading json map of height="+height+", width="+width);

            JSONObject layer;
            JSONArray array;
            int[] data;
            for (int i=0; i<layers.length(); i++) {
                layer = layers.getJSONObject(i);
                array = layer.getJSONArray("data");

                // case: visual layer
                if (!layer.getString("name").equalsIgnoreCase("collision")) {
                    data = new int[width * height];
                    int tile;
                    for (int j = 0; j < array.length(); j++) {
                        tile = array.getInt(j);
                        data[j] = tile > 0 ? tile-1 : -2;
                        // TODO: find a better solution for blank squares
                        // use 1023 for null because its a blank texture
                        // (see TextureFrameSet)
                    }

                    maps.add(new Map(data, width, height));

                // case: collision layer
                } else {
                    collision = new int[width * height];
                    int tile;
                    for (int j=0; j<array.length(); j++) {
                        collision[j] = array.getInt(j);
                    }
                }
            }

            Map collisionMap = collision!=null ? new Map(collision, width, height) : null;

            return new TiledObject(maps, collisionMap);

        } catch(JSONException e) {
            Log.d("TiledImporter", "unable to load json file:");
            e.printStackTrace();
            return null;
        }
    }


}
